type CurrentWeather {
  is_day: Int
  temperature: Float
  time: String
  weathercode: Int
  winddirection: Int
  windspeed: Int
}
type Daily {
  sunrise: [String]
  sunset: [String]
  temperature_2m_max: [Float]
  temperature_2m_min: [Float]
  time: [Date]
  uv_index_max: [Float]
  weathercode: [Int]
}
type DailyUnits {
  sunrise: String
  sunset: String
  temperature_2m_max: String
  temperature_2m_min: String
  time: String
  uv_index_max: String
  weathercode: String
}
type Hourly {
  precipitation: [Float]
  precipitation_probability: [Int]
  rain: [Float]
  relativehumidity_2m: [Int]
  showers: [Float]
  snowfall: [Int]
  temperature_2m: [Float]
  time: [String]
  uv_index: [Float]
  weathercode: [Int]
}
type HourlyUnits {
  precipitation: String
  precipitation_probability: String
  rain: String
  relativehumidity_2m: String
  showers: String
  snowfall: String
  temperature_2m: String
  time: String
  uv_index: String
  weathercode: String
}
type Root {
  current_weather: CurrentWeather
  daily: Daily
  daily_units: DailyUnits
  elevation: Int
  generationtime_ms: Float
  hourly: Hourly
  hourly_units: HourlyUnits
  latitude: Float
  longitude: Float
  timezone: String
  timezone_abbreviation: String
  utc_offset_seconds: Int
}

type Query {
  myQuery(
    current_weather: String
    daily: String
    forecast_days: String
    hourly: String
    latitude: String
    longitude: String
    models: String
    precipitation_unit: String
    temperature_unit: String
    timezone: String
    windspeed_unit: String
  ): Root @rest(endpoint: "https://api.open-meteo.com/v1/forecast")
}
